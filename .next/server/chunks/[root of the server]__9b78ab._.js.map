{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/siddharthgupta/Documents/HOSTR-project/app/api/party-plan/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\n\ntype PartyPlanRequest = {\n  guestSize: number;\n  partyType: string;\n  under21: boolean;\n  location: string;\n};\n\ntype PartyPlanResponse = {\n  plan: string;\n  error?: string;\n};\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body: PartyPlanRequest = await req.json();\n    const { guestSize, partyType, under21, location } = body;\n\n    if (!guestSize || !partyType || !location) {\n      return NextResponse.json(\n        { error: \"Missing required fields: guestSize, partyType, or location\" },\n        { status: 400 }\n      );\n    }\n\n    // Send request to the Flask server\n    const response = await fetch(\"http://127.0.0.1:4200/api/party_plan\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ guestSize, partyType, under21, location }),\n      signal: AbortSignal.timeout(10000), // 10 seconds timeout\n    });\n\n    // Check if response is actually JSON\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      return NextResponse.json(\n        { error: \"Invalid response from the Flask server. It may be down or misconfigured.\" },\n        { status: 500 }\n      );\n    }\n\n    const data: PartyPlanResponse = await response.json();\n    return NextResponse.json(data, { status: 200 });\n\n  } catch (error) {\n    console.error(\"Error communicating with Flask server:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error or timeout\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAcO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAyB,MAAM,IAAI,IAAI;QAC7C,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG;QAEpD,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,UAAU;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6D,GACtE;gBAAE,QAAQ;YAAI;QAElB;QAEA,mCAAmC;QACnC,MAAM,WAAW,MAAM,MAAM,wCAAwC;YACnE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAW;gBAAW;gBAAS;YAAS;YAC/D,QAAQ,YAAY,OAAO,CAAC;QAC9B;QAEA,qCAAqC;QACrC,MAAM,cAAc,SAAS,OAAO,CAAC,GAAG,CAAC;QACzC,IAAI,CAAC,eAAe,CAAC,YAAY,QAAQ,CAAC,qBAAqB;YAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2E,GACpF;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAA0B,MAAM,SAAS,IAAI;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;IAE/C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0CAA0C;QACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAmC,GAC5C;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}